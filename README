Onde
====

**Onde** is a web front-end library for JSON document editor. Onde uses 
json-schema as the base data to build the form.

**NOTE**: Please note that this project is very far from practically useful. 
There's so many missing functionalities and features. It has non-conformal 
standards implementation. The code is not well structured and optimized and 
bad practices all over the place. The UI and UX are not well designed.


Limitations
-----------

* Object property names in schema have these limitations: 
  they must contain only alphabet, numeric or underscore; they must not start 
  with a number. This because Onde uses some other characters to denote the 
  object structures in the HTML.
* Onde currently doesn't support array in 'type' property of schema (union).
* Onde currently needs the object properties in schema to have valid type.
* Onde currently doesn't support schema referencing.


Quick Start
-----------

- Open the file `samples/app.html` in a web browser (Firefox or Safari, won't work with Chrome).
- Click the `Load Schema` menu item.
- Enter `http://json-schema.org/address`.
- Push the `Load` button.


Schema
------

Primitive types: `string`, `number`, `integer`, `boolean`.

Strict separation between properties which describe it as object property and 
properties specific to type.

Properties which define property

- `type`
- `required`
- `title`
- `description`
- `default`
- `dependecies`
- `disallow`
- `id`
- `extends`

Any type properties

- `enum`

`string` type specific properties

- `pattern`
- `maxLength`
- `minLength`
- `format`
- `encoding` (?)

`number` type specific properties (also apply to `integer`)

- `minimum`
- `maximum`
- `exclusiveMinimum`
- `exclusiveMaximum`
- `divisibleBy`

`object` type specific properties

- `properties`
- `additionalProperties` could have array as the value which defines the types 
  allowed to be used as the additional properties.
- `patternProperties`

`array` type specific properties

- `items`
- `additionalItems`
- `minItems`
- `maxItems`
- `uniqueItems`


Property of `properties` could have 3 types of value:

- `string` the name of the type. The type must be primitive.
- `object` defines both the property and the type of property's value.
- `array` contains all types that could be used as the value of the property.

`type` could be string, object which gives more details about the type, or 
array contains type values.

- `label` human-friendly string which will be displayed to replace property name

Object specific properties

- `name` string which defines the name (to be displayed to represent the object as type)
- `propertyTypes` an array consists of the types allowed as object's properties

